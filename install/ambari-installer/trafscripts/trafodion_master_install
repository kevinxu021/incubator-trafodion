#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@

#==============================================
#  Trafodion installation script. Setup Trafodion
#  environment, configuration of HBase with
#  Hbase-trx and co-processors need for Trafodion, and
#  install Trafodion build. All parameters from scripts
#  use configuration file.
#==============================================

function print_usage {
cat << EOF

This script will install Trafodion. It will create a configuration
file (if one has not been created), setup of the environment needed
for Trafodion, configure HBase with Hbase-trx and co-processors needed,
and install a specified Trafodion build.

Options:
    --help             Print this message and exit
    --config_file      If provided, all install prompts will be
                       taken from this file and not prompted for.
    --no_start         Will not start trafodion. Useful if other configurations 
                       need to be done before a start.
EOF
}

function removePassword {

 export TRAF_CONFIG="/etc/trafodion/trafodion_config"
 source $TRAF_CONFIG

 sudo chmod 777 $TRAF_CONFIG
 sudo sed -i '/TRAF_USER_PASSWORD\=/d' $TRAF_CONFIG
 sudo sed -i '/PASSWORD\=/d' $TRAF_CONFIG
 sudo chmod 777 $TRAF_CONFIG

}

function fixPermissions {

if [[ -d /tmp/hsperfdata_trafodion ]]; then 
   sudo chown -R $TRAF_USER.trafodion /tmp/hsperfdata_trafodion
fi

}

#==============================================
#Parse input
USER_CONFIG=""
RUN_SCANNER="N"
NO_START="Y"

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            print_usage
            exit -1
            ;;
        --config_file)
            if [[ -z "$2" ]]; then
                echo "***ERROR: No value passed to param $1."
                print_usage
                exit -1
            fi
            USER_CONFIG=$2
            if [ -f $USER_CONFIG ]; then
               source $USER_CONFIG
            else
               echo "***ERROR: configuration file $USER_CONFIG does not exist"
               exit -1
            fi
            shift
            ;;
        --no_start)
            NO_START="N"
            ;;            
        *)
            echo "***ERROR: unknown parameter '$1'"
            print_usage
            exit -1
    esac
    shift
done

#==============================================
echo
echo "******************************"
echo " TRAFODION INSTALLATION START"
echo "******************************"
echo
#==============================================
# Default values

export timestamp=$(date +%F-%H-%M-%S)
export TRAF_LOGDIR="/var/log/trafodion"
export INSTALL_LOG="$TRAF_LOGDIR/trafodion_install_$timestamp.log"
export INSTALL_LOG_CP="$INSTALL_LOG"
export SCANNER_LOG="$TRAF_LOGDIR/trafodion_scanner_$timestamp.log"
#export TRAF_WORKDIR="$( cd "$( dirname "$0" )" && pwd )/.."
export TRAF_WORKDIR="/usr/lib/trafodion"
export LOCAL_WORKDIR="$( cd "$( dirname "$0" )" && pwd )"
export TRAF_CONFIG="/etc/trafodion/trafodion_config"
export TRAF_CONFIG_DIR=$(dirname $TRAF_CONFIG)
export TRAF_CONFIG_FILE=$(basename $TRAF_CONFIG)
export TRAF_USER="trafodion"
#==============================================
#Prechecks 

#Check not installing as userid Trafodion
if [[ "$(whoami)" == "$TRAF_USER" ]]; then
   echo "***ERROR: The Trafodion username cannot be the same as the install username"
   exit -1
fi

# check that we are running from a userid with sudo access
sudo echo "***INFO: testing sudo access"
if [ $? -ne 0 ]; then
    echo "***ERROR: This script must be run from a userid with sudo access."
    exit -1
fi

#==============================================
# Setup log & working directories

sudo mkdir -p $TRAF_LOGDIR
sudo chmod 777 $TRAF_LOGDIR
touch $INSTALL_LOG
sudo chmod 777 $INSTALL_LOG
echo "***INFO: Log file located at $INSTALL_LOG"

sudo mkdir -p $TRAF_CONFIG_DIR
sudo chmod 777 $TRAF_CONFIG_DIR
echo "***INFO: Config directory: $TRAF_CONFIG_DIR"

# create a working directory
sudo mkdir -p $TRAF_WORKDIR
sudo chmod -R 777 $TRAF_WORKDIR
echo "***INFO: Working directory: $TRAF_WORKDIR"
# copy install scripts into working directory
sudo cp -r $(cd "$( dirname "$0" )" && pwd)/ $TRAF_WORKDIR
sudo cp -rf $LOCAL_WORKDIR $TRAF_WORKDIR
sudo chmod -R 777 $TRAF_WORKDIR
#=============================================
# Shutdown Trafodion if it is running

userForTrafodion=`grep "$TRAF_USER:" /etc/passwd | wc -l`

#==============================================
# config file

sudo cp $USER_CONFIG $TRAF_CONFIG
if [ $? -ne 0 ]; then
   echo "***ERROR: unable to copy $USER_CONFIG to $TRAF_CONFIG"
   exit -1
fi
sudo chmod 777 $TRAF_CONFIG

source $TRAF_CONFIG
if [ $? -ne 0 ]; then
   echo "***ERROR: unable to source $TRAF_CONFIG"
   exit -1
fi
#=============================================
#Check Config File for Errors

$LOCAL_WORKDIR/traf_config_check | tee -a $INSTALL_LOG

if [ ${PIPESTATUS[0]} != "0" ]; then   
   echo "***ERROR: Error found while checking config file." 
   echo "***ERROR: Exiting..."
   exit -1 
fi

sudo chmod 777 $TRAF_CONFIG
sed -i '/INSTALL_LOG\=/d' $TRAF_CONFIG
echo "export INSTALL_LOG=\"$INSTALL_LOG_CP\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
source $TRAF_CONFIG

sudo chmod 777 $TRAF_CONFIG
sed -i '/START_ALL\=/d' $TRAF_CONFIG
echo "export START_ALL=\"$NO_START\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
source $TRAF_CONFIG

#=============================================
#Check if doing an upgrade

if [[ $CONFIG_COMPLETE ]]; then
   userForTrafodion=`grep "$TRAF_USER:" /etc/passwd | wc -l`
   if [[ "$userForTrafodion" == "0" ]]; then
      UPGRADE_TRAF=false;
   else
      UPGRADE_TRAF=true;
   fi

   #Add upgrade variable to config file
   sudo chmod 777 $TRAF_CONFIG
   sed -i '/UPGRADE_TRAF\=/d' $TRAF_CONFIG
   echo "export UPGRADE_TRAF=\"$UPGRADE_TRAF\"" >> $TRAF_CONFIG
   sudo chmod 777 $TRAF_CONFIG
   source $TRAF_CONFIG
fi

#==============================================
# untar package and files into /usr/lib/trafodion (the new TRAF_WORKDIR)
# This will be a global location that all tar files are untarred into

# if we have the package tar file we need to extract
# trafodion core and dcs  and rest-server builds from it
if [ ! -z $TRAF_PACKAGE ]; then

   # create directory to contain build tar files using the
   # timestamp from the package filename
   traf_filename=$(basename "$TRAF_PACKAGE")
   UNTAR_DIR="$TRAF_WORKDIR/${traf_filename%.tar.gz}"
   sudo mkdir -p $UNTAR_DIR
   sudo chmod 755 $UNTAR_DIR

   # untar the package
   sudo tar -xzf $TRAF_PACKAGE --directory=$UNTAR_DIR

   build_file=$(ls $UNTAR_DIR | grep "trafodion_.*server")
   if [[ -z $build_file ]]; then
      echo "***ERROR: trafodion_server-*.tgz could not be found in $UNTAR_DIR"
      exit -1
   fi
   TRAF_BUILD=$UNTAR_DIR/$build_file

   build_file=$(ls $UNTAR_DIR | grep "dcs")
   DCS_BUILD=$UNTAR_DIR/$build_file

   build_file=$(ls $UNTAR_DIR | grep "rest")
   if [ -z $build_file ]; then
      REST_BUILD=""
   else
      REST_BUILD=$UNTAR_DIR/$build_file
   fi

else
   # we don't have a package and only have the trafodion and dcs build tar files
   # we can't use the package filename timestamp since we don't have a package tar
   # file so we'll just create a directory using the current time
   UNTAR_DIR="$TRAF_WORKDIR/traf_$(date +%F_%H%M)"
   sudo mkdir -p $UNTAR_DIR
   sudo chmod 777 $UNTAR_DIR

   sudo cp $TRAF_BUILD $UNTAR_DIR
   if [ $? -ne 0 ]; then
      echo "***ERROR: unable to copy trafodion build ($TRAF_BUILD) to $UNTAR_DIR"
      exit -1
   fi

   sudo cp $DCS_BUILD $UNTAR_DIR
   if [ $? -ne 0 ]; then
      echo "***ERROR: unable to copy DCS build ($DCS_BUILD) to $UNTAR_DIR"
      exit -1
   fi

   if [ ! -z $REST_BUILD ]; then
      sudo cp $REST_BUILD $UNTAR_DIR
      if [ $? -ne 0 ]; then
         echo "***ERROR: unable to copy REST build ($REST_BUILD) to $UNTAR_DIR"
         exit -1
      fi
   fi

   build_file=$(basename $TRAF_BUILD)
   TRAF_BUILD=$UNTAR_DIR/$build_file

   sudo tar -xzf $TRAF_BUILD --directory=$UNTAR_DIR

   build_file=$(basename $DCS_BUILD)
   DCS_BUILD=$UNTAR_DIR/$build_file

   build_file=$(basename $REST_BUILD)
   REST_BUILD=$UNTAR_DIR/$build_file

fi

sed -i '/TRAF_BUILD\=/d' $TRAF_CONFIG
echo "export TRAF_BUILD=\"$TRAF_BUILD\"" >> $TRAF_CONFIG
sed -i '/DCS_BUILD\=/d' $TRAF_CONFIG
echo "export DCS_BUILD=\"$DCS_BUILD\"" >> $TRAF_CONFIG
sed -i '/REST_BUILD\=/d' $TRAF_CONFIG
echo "export REST_BUILD=\"$REST_BUILD\"" >> $TRAF_CONFIG

# add the untar directory to the config file
sed -i '/UNTAR_DIR\=/d' $TRAF_CONFIG
echo "export UNTAR_DIR=\"$UNTAR_DIR\"" >> $TRAF_CONFIG
source $TRAF_CONFIG

#==============================================
# Determine Trafodion version by parsing it
# from the trafodion_server tar file.
# Determine Java version

cd $UNTAR_DIR

# clean up any old files left lying around
sudo rm -rf $UNTAR_DIR/export/lib 2>/dev/null

# extract the hbase-trx jar file (and others) from the build tar file
sudo tar -xzf $TRAF_BUILD export/lib 2>&1 | tee -a $INSTALL_LOG
if [ ${PIPESTATUS[0]} != 0 ]; then
    echo "***ERROR: unable to find export/lib/ directory in $TRAF_BUILD" 2>&1 | tee -a $INSTALL_LOG
    exit -1
fi

# parse the version string from the trafodion_server-n.n.n.jar filename
traf_version=$(sudo ls $UNTAR_DIR | \
               grep --max-count=1 trafodion_.*server | \
               sed -e 's@trafodion_.*server-\([0-9*].*\).tgz@\1@')
TRAF_VERSION=$(echo $traf_version | sed -e 's@\([0-9*].*\)-debug@\1@')

# Detect java version

sudo chmod 777 $TRAF_CONFIG
sed -i '/TRAF_VERSION\=/d' $TRAF_CONFIG
echo "export TRAF_VERSION=\"$TRAF_VERSION\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
#==============================================
# Run trafodion_setup

echo "***INFO: creating Trafodion .bashrc file"


sudo cp $LOCAL_WORKDIR/bashrc_default /home/trafodion/.bashrc

sudo chown $TRAF_USER.trafodion /home/trafodion/.bashrc

sudo sed -i -e "s@export NODE_LIST=.*@export NODE_LIST=\"$NODE_LIST\"@" $TRAF_USER_DIR/.bashrc   
sudo sed -i -e "s@export MY_NODES=.*@export MY_NODES=\"$MY_NODES\"@" $TRAF_USER_DIR/.bashrc
sudo sed -i -e "s@export JAVA_HOME=.*@export JAVA_HOME=\"$JAVA_HOME\"@" $TRAF_USER_DIR/.bashrc

$LOCAL_WORKDIR/traf_setLimits 2>&1 | tee -a $INSTALL_LOG
if [ ${PIPESTATUS[0]} != "0" ]; then
   echo "***ERROR: traf_setLimits exited with error." | tee -a $INSTALL_LOG
   echo "***ERROR: Please check log files." | tee -a $INSTALL_LOG
   echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
   exit -1
fi


fixPermissions


$LOCAL_WORKDIR/traf_sqconfig
if [ $? != 0 ]; then
   echo "***ERROR: traf_sqconfig script failed."
   echo "***ERROR: sqconfig file not created."
   exit -1
fi
#Reserve DCS Ports

echo "***INFO: Reserving DCS ports"
trafodion_ports=${DCS_MASTER_PORT:-23400},${DCS_MASTER_INFO_PORT:-24400}
reservedTrafodionPorts="net.ipv4.ip_local_reserved_ports = ${trafodion_ports}"

redhatSystem=$(/sbin/sysctl net.ipv4.ip_local_reserved_ports | wc -l)

if [[ "$redhatSystem" -ge "1" ]]; then
   reserved_ports=$(/sbin/sysctl net.ipv4.ip_local_reserved_ports | awk -F'=' '{print $2;}' | sed 's/^ //')
   sudo chmod 777 /etc/sysctl.conf 2>&1 > /dev/null
   sudo sed -i '/net.ipv4.ip_local_reserved_ports""\=*/d' /etc/sysctl.conf 2>&1 > /dev/null

   if [[ -z "${reserved_ports}" ]]; then
      sudo echo "$reservedTrafodionPorts" >> /etc/sysctl.conf 2>&1 > /dev/null
   else
      sudo echo "$reservedTrafodionPorts","$reserved_ports" >> /etc/sysctl.conf 2>&1 > /dev/null
   fi
   sudo chmod 644 /etc/sysctl.conf 2>&1 > /dev/null
   sudo /sbin/sysctl -p 2>&1 > /dev/null
else
   echo "***ERROR: Unable to reserve DCS ports (${trafodion_ports})."
   exit -1
fi

sudo chmod 777 $TRAF_CONFIG
sed -i '/DCS_PORT\=/d' $TRAF_CONFIG
echo "export DCS_PORT=\"23400\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG

sudo chmod 777 $TRAF_CONFIG
sed -i '/DCS_INFO_PORT\=/d' $TRAF_CONFIG
echo "export DCS_INFO_PORT=\"24400\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
source $TRAF_CONFIG

if [[ $ENABLE_HA == "true" ]]; then
   $LOCAL_WORKDIR/traf_add_sudoAccess
fi

#Set Max kernel pid

sudo /sbin/sysctl -w kernel.pid_max=65535 2>&1 > /dev/null
sudo sed -i '/kernel\.pid\_max*/d' /etc/sysctl.conf 2>&1 > /dev/null
sudo chmod 777 /etc/sysctl.conf
sudo echo "kernel.pid_max = 65535" >> /etc/sysctl.conf
sudo chmod 644 /etc/sysctl.conf

#Copy over traf_authentication_config file to all nodes
if [[ "$LDAP_SECURITY" == "Y" ]]; then
   echo "***INFO: Copying $LDAP_AUTH_FILE to Trafodion home dir"

   if [[ "$all_node_count" -eq "1" ]]; then
      sudo cp -r $LOCAL_WORKDIR/$LDAP_AUTH_FILE $HOME_DIR/$TRAF_USER
      sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      if [[ $LDAP_LEVEL == "2" ]] || [[ $LDAP_LEVEL == "1" ]]; then
         echo "***INFO: Copying $LDAP_CERT to Trafodion home dir"
         sudo cp -r $LDAP_CERT $HOME_DIR/$TRAF_USER
         sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
         sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
      fi
   else
      $TRAF_PDCP $LOCAL_WORKDIR/$LDAP_AUTH_FILE $HOME
      $TRAF_PDSH sudo cp -r $HOME/$LDAP_AUTH_FILE $HOME_DIR/$TRAF_USER
      $TRAF_PDSH sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      $TRAF_PDSH sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      if [[ $LDAP_LEVEL == "2" ]] || [[ $LDAP_LEVEL == "1" ]]; then
         echo "***INFO: Copying $LDAP_CERT to Trafodion home dir"
         $TRAF_PCP $LDAP_CERT $HOME
         $TRAF_PDSH sudo cp -r $HOME/$LDAP_CERT_BASE $HOME_DIR/$TRAF_USER
         $TRAF_PDSH sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
         $TRAF_PDSH sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
      fi
   fi
fi
#=============================================
#Run trafodion_mods

echo
echo "******************************"
echo " TRAFODION MODS"
echo "******************************"
echo

echo "***INFO: Hortonworks installed will run ambari_trafodion_setup" 2>&1 | tee -a $INSTALL_LOG
$LOCAL_WORKDIR/traf_hortonworks_mods98 2>&1 | tee -a $INSTALL_LOG

if [ ${PIPESTATUS[0]}  != "0" ]; then
   echo "***ERROR: traf_hortonworks_mods98 exited with error." | tee -a $INSTALL_LOG
   echo "***ERROR: Please check log files." | tee -a $INSTALL_LOG
   echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
   exit -1
fi

echo "***INFO: Trafodion Mods ran successfully."

#==============================================
#Parse HBase site.xml

$LOCAL_WORKDIR/parseHBaseSite.py

#==============================================
#Install Trafodion
echo
echo "******************************"
echo " TRAFODION CONFIGURATION"
echo "******************************"
echo
sudo mkdir -p $SQ_ROOT
sudo chown $TRAF_USER.trafodion $SQ_ROOT

sudo su $TRAF_USER --login --command "$LOCAL_WORKDIR/traf_config" 2>&1 | tee -a $INSTALL_LOG

if [ ${PIPESTATUS[0]} != "0" ]; then
   echo "***ERROR: Error while running traf_config." | tee -a $INSTALL_LOG
   echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
   echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
   exit -1
fi

# Install and configure CLI for Cloud environments
if  [ "$ENABLE_HA" == "true" ] && [[ $CLOUD_CONFIG == "Y" ]] && [[ $all_node_count -gt 1 ]]; then
  echo "***INFO: Install and configure CLI for Cloud"
  $TRAF_WORKDIR/installer/cloud_cli_setup
fi

if [[ $START_ALL == "Y" ]]; then
   sudo su $TRAF_USER --login --command "$LOCAL_WORKDIR/traf_sqgen" 2>&1 | tee -a $INSTALL_LOG

   if [ ${PIPESTATUS[0]} != "0" ]; then
      echo "***ERROR: Error while running traf_sqgen." | tee -a $INSTALL_LOG
      echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
      echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
     exit -1
  fi
fi

"$LOCAL_WORKDIR/esgyn_dbManager_setup"

#==============================================
#removePassword
echo
echo
