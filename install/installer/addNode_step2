#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@


export TRAF_CONFIG="/etc/trafodion/trafodion_config"
source $TRAF_CONFIG

function installPackages {

source $TRAF_CONFIG

if [[ "$SUSE_LINUX" == "true" ]]; then
   echo
   echo "***WARNING: All needed RPM's must be installed in advance to install Trafodion on SUSE."
   echo "***WARNING: pdsh apr apr-util sqlite expect perl-DBD-SQLite* xerces-c perl-Params-Validate perl-Time-HiRes gzip lzo lzop unzip unixODBC libiodbc libiodbc-devel openldap-clients snappy"
   echo "***WARNING: If any of these packages have not been installed. Stop Trafodion installation and install."
   echo
   sleep 10
else
   $PWD/addNode_packages
   if [[ "$?" -ne "0" ]]; then
      echo "***ERROR: Packages were not installed."
      echo "***ERROR: Review logs in /var/log/trafodion/.."
      exit -1
   fi
fi

}

function copyLimits {

echo "***INFO: Copying /etc/security/limits.d/trafodion.conf to new node(s)"
echo

source $TRAF_CONFIG

sudo cp /etc/security/limits.d/trafodion.conf $HOME
$TRAF_NEW_PDCP $HOME/trafodion.conf $HOME
$TRAF_NEW_PDSH sudo cp trafodion.conf /etc/security/limits.d/

}

function reserveDCSPorts {

source $TRAF_CONFIG

$PWD/addNode_reservePorts

if [[ "$?" -ne "0" ]]; then
   echo "***ERROR: Not able to reserve DCS ports."
   exit -1 
fi


}

function setKernelMax {

echo "***INFO: Setting kernel.pid_max on new node(s)"
echo

source $TRAF_CONFIG

$TRAF_NEW_PDSH sudo /sbin/sysctl -w kernel.pid_max=65535 2>&1 > /dev/null

sudo cp /etc/sysctl.conf $HOME 2>&1 > /dev/null
sudo chown $(whoami).$(whoami) $HOME/sysctl.conf

$TRAF_NEW_PDCP $HOME/sysctl.conf $HOME 2>&1 > /dev/null
$TRAF_NEW_PDSH sudo mv $HOME/sysctl.conf /etc/sysctl.conf
$TRAF_NEW_PDSH sudo chown root.root /etc/sysctl.conf
$TRAF_NEW_PDSH sudo chmod 644 /etc/sysctl.conf

}

function createTrafUserId {

echo "***INFO: Creating $TRAF_USER on new node(s)"
echo

source $TRAF_CONFIG

TRAF_GROUP="trafodion"

traf_gid=$(id -g $TRAF_USER)
traf_uid=$(id -u $TRAF_USER)

$TRAF_NEW_PDSH sudo /usr/sbin/groupadd --gid $traf_gid $TRAF_GROUP
return_code=$?
if [ $return_code -ne 0 ]; then
   # if it is not a duplicate group error then we have a problem
   if [ $return_code -ne 9 ]; then
      echo "***ERROR: unable to create Trafodion group: $TRAF_GROUP"
      exit -1
   fi
fi


$TRAF_NEW_PDSH sudo mkdir -p $HOME_DIR
TRAF_USER_DIR="$HOME_DIR/$TRAF_USER"

$TRAF_NEW_PDSH sudo /usr/sbin/useradd \
    --shell /bin/bash \
    --home $TRAF_USER_DIR -m \
    --gid $traf_gid \
    --uid $traf_uid \
    $TRAF_USER
return_code=$?
if [ $return_code -ne 0 ]; then
    if [ $return_code -eq 9 ]; then
        echo "***WARNING: username already exists, will use existing userid, $TRAF_USER..."
    else
        echo "***ERROR: unable to create Trafodion userid: $TRAF_USER.$TRAF_GROUP, RC=$return_code"
        exit -1
    fi
fi

}

function changeTrafPassword {

source $TRAF_CONFIG
echo 
echo "***IMPORTANT: You need to set the $TRAF_USER password on $NEW_NODES, set it to what you have on other nodes."
echo "***IMPORTANT: sudo passwd $TRAF_USER"
echo 
echo 
sleep 10

}

function editTrafbashrc {

source $TRAF_CONFIG

sudo chmod 777 $HOME_DIR/$TRAF_USER/.bashrc
sudo sed -i -e "s@export NODE_LIST=.*@export NODE_LIST=\"$NODE_LIST\"@" $HOME_DIR/$TRAF_USER/.bashrc
sudo sed -i -e "s@export MY_NODES=.*@export MY_NODES=\"$MY_NODES\"@" $HOME_DIR/$TRAF_USER/.bashrc

}

function copyTrafbashrc {

echo "***INFO: Copying over $TRAF_USER .bashrc file"

source $TRAF_CONFIG

sudo cp $HOME_DIR/$TRAF_USER/.bashrc $PWD/tempBashrc

$TRAF_PDCP $PWD/tempBashrc $HOME
$TRAF_PDSH sudo cp $HOME/tempBashrc $HOME_DIR/$TRAF_USER/.bashrc
$TRAF_PDSH sudo chmod 644 $HOME_DIR/$TRAF_USER/.bashrc

}

function copyClusterConf {

source $TRAF_CONFIG
echo "***INFO: Copying over new cluster.conf file" 

echo "***IMPORTANT*** Ignore copy errors to new node."
echo
sleep 5

sudo cp $SQ_ROOT/tmp/cluster.conf $PWD
sudo chown $(whoami).$(whoami) $PWD/cluster.conf
$TRAF_PDCP $PWD/cluster.conf $HOME
$TRAF_PDSH sudo cp $HOME/cluster.conf $SQ_ROOT/tmp/cluster.conf 2>&1 > /dev/null
$TRAF_PDSH sudo chown $TRAF_USER.trafodion $SQ_ROOT/tmp/cluster.conf 2>&1 > /dev/null
$TRAF_PDSH sudo rm $HOME/cluster.conf

}

function copySQconfig {

source $TRAF_CONFIG
echo "***INFO: Copying over new sqconfig file"

echo "***IMPORTANT*** Ignore copy errors to new node."
echo
sleep 5

sudo cp -r $SQ_ROOT/sql/scripts/sqconfig $PWD
sudo chown $(whoami).$(whoami) $PWD/sqconfig
$TRAF_PDCP $PWD/sqconfig $HOME
$TRAF_PDSH sudo cp $HOME/sqconfig $SQ_ROOT/sql/scripts/sqconfig 2>&1 > /dev/null
$TRAF_PDSH sudo chown $TRAF_USER.trafodion $SQ_ROOT/sql/scripts/sqconfig 2>&1 > /dev/null
$TRAF_PDSH sudo rm $HOME/sqconfig


}

function addTraftoHBase {

echo "***INFO: Adding $TRAF_USER userid  to $HBASE_GROUP group"

source $TRAF_CONFIG

$TRAF_NEW_PDSH sudo usermod -a -G $HBASE_GROUP $TRAF_USER
}

function editDCSServers {

echo "***INFO: Create DCS servers file"

source $TRAF_CONFIG
DCS_DIR=$(sudo ls $SQ_ROOT | grep dcs\*)

sudo cp $SQ_ROOT/$DCS_DIR/conf/servers $PWD
sudo chown $(whoami).$(whoami) $PWD/servers

let per_node=$DCS_SERVERS_PARM/$node_count
let extras=$DCS_SERVERS_PARM%$node_count
count=1
for node_name in $NEW_NODES
do
   if [ $count -le $extras ]; then
      let node_servers=$per_node+1
   else
      node_servers=$per_node
   fi
   echo $node_name $node_servers >> $PWD/servers
   (( count++ ))
done


$TRAF_PDCP $PWD/servers $HOME
$TRAF_PDSH sudo cp $HOME/servers $SQ_ROOT/$DCS_DIR/conf
$TRAF_PDSH sudo chown $TRAF_USER.trafodion $SQ_ROOT/$DCS_DIR/conf/servers



}

function copyAll {

source $TRAF_CONFIG
echo 
echo "***IMPORTANT: Copying files to $NEW_NODES"
echo "***IMPORTANT: This will take some time, it's alot of file. Please wait...."
echo 
sudo mkdir -p $HOME/tmpTraf/
$TRAF_NEW_PDSH sudo rm -rf $HOME_DIR/$TRAF_USER/.ssh
$TRAF_NEW_PDSH sudo mkdir -p $HOME_DIR/$TRAF_USER/.ssh

$TRAF_NEW_PDSH mkdir -p $HOME/tmpTraf
sudo cp -r $HOME_DIR/$TRAF_USER/.bashrc $HOME/tmpTraf/.bashrc
sudo cp -r $HOME_DIR/$TRAF_USER/.ssh $HOME/tmpTraf
sudo cp -r $SQ_ROOT $HOME/tmpTraf
echo "***IMPORTANT: Keep waiting..."
sudo chown -R $(whoami).$(whoami) $HOME/tmpTraf
$TRAF_NEW_PDCP -r $HOME/tmpTraf $HOME
echo "***IMPORTANT: Seriously, it's a lot of file"
$TRAF_NEW_PDSH sudo cp -r $HOME/tmpTraf/* $HOME_DIR/$TRAF_USER
$TRAF_NEW_PDSH sudo cp -r $HOME/tmpTraf/.ssh/* $HOME_DIR/$TRAF_USER/.ssh/
echo "***IMPORTANT: Script got to this point, probably not a hung system."
$TRAF_NEW_PDSH sudo chown -R $TRAF_USER.trafodion $HOME_DIR/$TRAF_USER
$TRAF_NEW_PDSH sudo rm -rf $HOME/tmpTraf
sudo rm -r $HOME/tmpTraf

}

function trafAcceptKeys {

echo "***INFO: Accepting keys on all nodes for all hostname types"

source $TRAF_CONFIG

NODES_SHORT=""
for node in $NODE_LIST
do
   newNode=$(ssh -q -n $node hostname -s)

   NODES_SHORT="$NODES_SHORT $newNode"
done

NODES_LONG=""
for node in $NODE_LIST
do
   newNode=$(ssh -q -n $node hostname -f)

   NODES_LONG="$NODES_LONG $newNode"
done
./traf_createPasswordLessSSH --nodes "$NODE_LIST"
echo "***INFO: Keep waiting...."
./traf_createPasswordLessSSH --nodes "$NODES_SHORT"
echo "***INFO: All is well...."
./traf_createPasswordLessSSH --nodes "$NODES_LONG"

 
sudo cp $HOME_DIR/$TRAF_USER/.ssh/known_hosts $HOME
sudo chown -R $(whoami).$(whoami) $HOME/known_hosts

$TRAF_PDCP $HOME/known_hosts $HOME
$TRAF_PDSH sudo cp -r $HOME/known_hosts $HOME_DIR/$TRAF_USER/.ssh
$TRAF_PDSH sudo chown -R $TRAF_USER.trafodion $HOME_DIR/$TRAF_USER/.ssh/known_hosts
$TRAF_PDSH sudo rm -rf $HOME/known_hosts

}

function copySqcert {

source $TRAF_CONFIG

$TRAF_PDSH mkdir -p $HOME/tmpTraf
sudo cp -r $HOME_DIR/$TRAF_USER/sqcert $HOME/tmpTraf
sudo chown -R $(whoami).$(whoami) $HOME/tmpTraf
$TRAF_PDCP -r $HOME/tmpTraf $HOME
$TRAF_PDSH sudo mkdir -p $HOME_DIR/$TRAF_USER/sqcert
$TRAF_PDSH sudo chown -R $TRAF_USER.trafodion $HOME_DIR/$TRAF_USER/sqcert 2>&1 > /dev/null
$TRAF_PDSH sudo cp -rf $HOME/tmpTraf/sqcert $HOME_DIR/$TRAF_USER/sqcert 2>&1 > /dev/null
$TRAF_PDSH sudo chown -R $TRAF_USER.trafodion $HOME_DIR/$TRAF_USER/sqcert 2>&1 > /dev/null
$TRAF_PDSH rm -r $HOME/tmpTraf

}


function printMessage {

source $TRAF_CONFIG
echo
echo "***IMPORTANT: EXIT OUT OF ALL EXISTING SHELLS, need to pick up new environment variables"
echo "***IMPORTANT: Node is ready to be added"
echo "***IMPORTANT: sudo su $TRAF_USER"
echo "***IMPORTANT: sqshell -a"
echo "***IMPORTANT: up <new node>"
echo

}


#Main

echo
echo "***IMPORTANT: Starting installation on $NEW_NODES"
echo 
installPackages
copyLimits
reserveDCSPorts
setKernelMax
createTrafUserId
changeTrafPassword
editTrafbashrc
copyTrafbashrc
copyAll
trafAcceptKeys
editDCSServers
addTraftoHBase
copyClusterConf
copySQconfig
copySqcert
printMessage

