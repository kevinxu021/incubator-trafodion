<?xml version="1.0" encoding="UTF-8"?>
<!-- @@@ START COPYRIGHT @@@
 
     (C) Copyright 2015-2016 Esgyn Corporation
 
     @@@ END COPYRIGHT @@@
-->
<SystemQueries>
	<queries>
		<query>
			<!-- Get system info -->
			<name>GET_SYSTEM_INFO</name>
			<text><![CDATA[info system]]></text>
		</query>
		<query>
			<!-- Get system version -->
			<name>GET_SYSTEM_VERSION</name>
			<text><![CDATA[get version of software]]></text>
		</query>
		<query>
			<!-- Get List of DCS servers and their status -->
			<name>GET_DCS_SERVERS</name>
			<text><![CDATA[{"url":"%1$s/v1/servers/dcs/connections", "method":"get"}]]></text>
		</query>
		<query>
			<!-- Get DCS summary -->
			<name>GET_DCS_SUMMARY</name>
			<text><![CDATA[{"url":"%1$s/v1/servers/dcs/summary", "method":"get"}]]></text>
		</query>
		<query>
			<!-- Get status of EsgynDB Services -->
			<name>GET_SERVICE_STATUS</name>
			<text><![CDATA[{"url":"%1$s/v1/servers", "method":"get"}]]></text>
		</query>
		<query>
			<!-- Get status of EsgynDB nodes -->
			<name>GET_NODE_STATUS</name>
			<text><![CDATA[{"url":"%1$s/v1/servers/nodes", "method":"get"}]]></text>
		</query>				
		<query>
			<!-- Get pstack of a process -->
			<name>GET_PROCESS_PSTACK</name>
			<text><![CDATA[{"url":"%1$s/v1/servers/pstack/program/%2$s", "method":"get"}]]></text>
		</query>	
		<query>
			<!-- Fetch list of schemas -->
			<name>SELECT_SCHEMAS</name>
			<text><![CDATA[select schema_name as "Name", authname(schema_owner) as "Owner", 
					converttimestamp(create_time) as "CreateTime", converttimestamp(redef_time) as "ModifiedTime",
					CAST(object_uid  AS CHAR(26)) as "Object ID" 
					from "_MD_".objects 
					where catalog_name = ?
					and schema_name NOT LIKE 'VOLATILE%'
					and object_name = '__SCHEMA__'
					order by schema_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch details about a specific schema -->
			<name>SELECT_SCHEMA_ATTRIBUTES</name>
			<text><![CDATA[select schema_name as "Name", user(schema_owner) as "Owner", 
					converttimestamp(create_time) as "CreateTime", converttimestamp(redef_time) as "ModifiedTime",
					CAST(object_uid  AS CHAR(26)) as "Object ID" 
					from "_MD_".objects 
					where catalog_name = ? and schema_name = ?
					and schema_name NOT LIKE 'VOLATILE%'
					and object_name = '__SCHEMA__'
					order by schema_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch list of schema objects (tables/mvs/views/libraries/procedures) -->
			<name>SELECT_SCHEMA_OBJECTS</name>
			<text><![CDATA[select distinct object_name as "Name", user(object_owner) as "Owner", 
					converttimestamp(create_time) as "CreateTime", converttimestamp(redef_time) as "ModifiedTime",
					CAST(object_uid  AS CHAR(26))  as "Object ID"
					from "_MD_".objects 
					WHERE CATALOG_NAME = ? AND SCHEMA_NAME = ?
					and object_type = ?
					and object_name not in ('SB_HISTOGRAMS', 'SB_HISTOGRAM_INTERVALS')
					order by object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch attributes of schema object (tables/mvs/views/libraries/procedures) -->
			<name>SELECT_SCHEMA_OBJECT_ATTRIBUTES</name>
			<text><![CDATA[select object_name as "Name", user(object_owner) as "Owner", 
					converttimestamp(create_time) as "CreateTime", converttimestamp(redef_time) as "ModifiedTime",
					CAST(object_uid  AS CHAR(26))  as "Object ID"
					from "_MD_".objects 
					WHERE CATALOG_NAME = ? AND SCHEMA_NAME = ?
					and object_name = ?
					and object_type = ?
					order by object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch list of tables in a schema -->
			<name>SELECT_TABLES_IN_SCHEMA</name>
			<text><![CDATA[SELECT O.OBJECT_NAME as "Table Name", USER(OBJECT_OWNER) AS "Owner",
			    CONVERTTIMESTAMP(CREATE_TIME) AS "CreateTime", CONVERTTIMESTAMP(REDEF_TIME) AS "ModifiedTime",
			    CAST(O.object_uid  AS CHAR(26)) as "Object ID",
			    T.KEY_LENGTH AS "Key Length", T.ROW_TOTAL_LENGTH as "Row Total Length", 
                T.NUM_SALT_PARTNS as "Number Salt Partitions", T2.region_count as "Region Count",
                CAST( CASE WHEN 1 > T2.store_file_size_mb THEN 0 ELSE (T2.store_file_size_mb/(1024*1024)) END AS DECIMAL(18,2)) AS "Store File Size (MB)" , 
                CAST( CASE WHEN 1 > T2.mem_store_size_mb THEN 0 ELSE (T2.mem_store_size_mb/(1024*1024)) END AS DECIMAL(18,2)) AS "Mem Store Size (MB)" , 
 				T2.read_requests_count as "Read Requests Count", T2.write_requests_count as "Write Requests Count"
			    FROM TRAFODION."_MD_".OBJECTS O, TRAFODION."_MD_".TABLES T,
                (select schema_name, object_name, count(*) as region_count,
                 sum(store_file_size) as store_file_size_mb, sum(mem_store_size) as mem_store_size_mb,
				 sum(read_requests_count) as read_requests_count, sum(write_requests_count) as write_requests_count
                 from table(region stats (using (select * from (
                   get tables in schema %1$s, no header, return full names) x(a) )))
                   group by 1, 2) as T2
			    WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ? 
			    AND O.OBJECT_UID = T.TABLE_UID 
			    AND O.OBJECT_TYPE = 'BT' 
                AND O.SCHEMA_NAME = T2.SCHEMA_NAME
                AND O.OBJECT_NAME = T2.OBJECT_NAME
                FOR READ UNCOMMITTED
			    ACCESS ORDER BY 1
				]]></text>
		</query>
		<query>
			<!-- Fetch table attributes -->
			<name>SELECT_TABLE_ATTRIBUTES</name>
			<text><![CDATA[SELECT O.OBJECT_NAME as "Table Name", USER(OBJECT_OWNER) AS "Owner",
			    CONVERTTIMESTAMP(CREATE_TIME) AS "CreateTime", CONVERTTIMESTAMP(REDEF_TIME) AS "ModifiedTime",
			    CAST(O.object_uid  AS CHAR(26)) as "Object ID",
			    T.KEY_LENGTH AS "Key Length", T.ROW_TOTAL_LENGTH as "Row Total Length", 
                T.NUM_SALT_PARTNS as "Number Salt Partitions", T2.region_count as "Region Count",
                CAST( CASE WHEN 1 > T2.store_file_size_mb THEN 0 ELSE (T2.store_file_size_mb/(1024*1024)) END AS DECIMAL(18,2)) AS "Store File Size (MB)" , 
                CAST( CASE WHEN 1 > T2.mem_store_size_mb THEN 0 ELSE (T2.mem_store_size_mb/(1024*1024)) END AS DECIMAL(18,2)) AS "Mem Store Size (MB)" , 
 				T2.read_requests_count as "Read Requests Count", T2.write_requests_count as "Write Requests Count"
			    FROM TRAFODION."_MD_".OBJECTS O, TRAFODION."_MD_".TABLES T,
                (select schema_name, object_name, count(*) as region_count,
                 sum(store_file_size) as store_file_size_mb, sum(mem_store_size) as mem_store_size_mb,
				 sum(read_requests_count) as read_requests_count, sum(write_requests_count) as write_requests_count
                 from table(region stats (using (select * from (
                   get tables in schema %1$s, no header, return full names) x(a) )))
                   group by 1, 2) as T2
			    WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ? 
			    AND O.OBJECT_NAME = ? AND O.OBJECT_UID = T.TABLE_UID 
			    AND O.OBJECT_TYPE = 'BT' 
                AND O.SCHEMA_NAME = T2.SCHEMA_NAME
                AND O.OBJECT_NAME = T2.OBJECT_NAME
                FOR READ UNCOMMITTED
			    ACCESS ORDER BY 1
				]]></text>
		</query>		
		<query>
			<!-- Fetch list of views in a schema -->
			<name>SELECT_VIEWS_IN_SCHEMA</name>
			<text><![CDATA[SELECT O.OBJECT_NAME AS "View Name", USER(OBJECT_OWNER) AS "Owner",
			    CONVERTTIMESTAMP(CREATE_TIME) AS "CreateTime", CONVERTTIMESTAMP(REDEF_TIME) AS "ModifiedTime",
			    CAST(O.object_uid  AS CHAR(26)) as "Object ID",
			    CASE WHEN V.CHECK_OPTION  = 'Y' THEN 'Yes' ELSE 'No' END as "Check Option", 
				CASE WHEN V.IS_UPDATABLE = 1 THEN 'Yes' ELSE 'No' END as "Updateable", 
				CASE WHEN V.IS_INSERTABLE = 1 THEN 'Yes' ELSE 'No' END as "Insertable"
			    FROM TRAFODION."_MD_".OBJECTS O, TRAFODION."_MD_".VIEWS V 
			    WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ? 
			    AND O.OBJECT_UID = V.VIEW_UID
			    AND O.OBJECT_TYPE = 'VI' FOR READ UNCOMMITTED ACCESS ORDER BY 1 ;
				]]></text>
		</query>		
		<query>
			<!-- Fetch view attributes -->
			<name>SELECT_VIEW_ATTRIBUTES</name>
			<text><![CDATA[SELECT O.OBJECT_NAME AS "View Name", USER(OBJECT_OWNER) AS "Owner",
			    CONVERTTIMESTAMP(CREATE_TIME) AS "CreateTime", CONVERTTIMESTAMP(REDEF_TIME) AS "ModifiedTime",
			    CAST(O.object_uid  AS CHAR(26)) as "Object ID",
			    CASE WHEN V.CHECK_OPTION  = 'Y' THEN 'Yes' ELSE 'No' END as "Check Option", 
				CASE WHEN V.IS_UPDATABLE = 1 THEN 'Yes' ELSE 'No' END as "Updateable", 
				CASE WHEN V.IS_INSERTABLE = 1 THEN 'Yes' ELSE 'No' END as "Insertable"
			    FROM TRAFODION."_MD_".OBJECTS O, TRAFODION."_MD_".VIEWS V 
			    WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ? 
			    AND O.OBJECT_NAME = ? 
			    AND O.OBJECT_UID = V.VIEW_UID AND O.OBJECT_TYPE = 'VI' 
			    FOR READ UNCOMMITTED ACCESS ORDER BY 1 ;
				]]></text>
		</query>
		<query>
			<!-- Fetch list of indexes in a schema -->
			<name>SELECT_INDEXES_IN_SCHEMA</name>
			<text><![CDATA[SELECT O.OBJECT_NAME AS "Index Name", USER(O.OBJECT_OWNER) AS "Owner",
				    CONVERTTIMESTAMP(O.CREATE_TIME) AS "CreateTime", CONVERTTIMESTAMP(O.REDEF_TIME) AS "ModifiedTime",
				    CAST(O.object_uid  AS CHAR(26)) as "Object ID",
				    O2.OBJECT_NAME as "Table Name", 
				    CASE WHEN I.IS_UNIQUE = 1 THEN 'Unique' ELSE 'Non Unique' END as "Is Unqiue", 
				    I.KEY_COLCOUNT as "Key Col. Count", I.NONKEY_COLCOUNT as "Non Key Col. Count"
				    FROM TRAFODION."_MD_".INDEXES I, TRAFODION."_MD_".OBJECTS O,
				    TRAFODION."_MD_".OBJECTS O2 
				    WHERE  O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ? 
				    AND I.INDEX_UID = O.OBJECT_UID 
				    AND I.BASE_TABLE_UID = O2.OBJECT_UID 
				    FOR READ UNCOMMITTED ACCESS ORDER BY 1;
				]]></text>
		</query>	
		<query>
			<!-- Fetch list of indexes on a given object -->
			<name>SELECT_INDEXES_ON_OBJECT</name>
			<text><![CDATA[SELECT O.OBJECT_NAME AS "Index Name", USER(O.OBJECT_OWNER) AS "Owner",
				    CONVERTTIMESTAMP(O.CREATE_TIME) AS "CreateTime", CONVERTTIMESTAMP(O.REDEF_TIME) AS "ModifiedTime",
				    CAST(O.object_uid  AS CHAR(26)) as "Object ID",
				    O2.OBJECT_NAME as "Table Name", 
				    CASE WHEN I.IS_UNIQUE = 1 THEN 'Unique' ELSE 'Non Unique' END as "Is Unqiue", 
				    I.KEY_COLCOUNT as "Key Col. Count", I.NONKEY_COLCOUNT as "Non Key Col. Count"
				    FROM TRAFODION."_MD_".INDEXES I, TRAFODION."_MD_".OBJECTS O,
				    TRAFODION."_MD_".OBJECTS O2 
				    WHERE  O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ? 
				    AND I.INDEX_UID = O.OBJECT_UID 
				    AND O2.OBJECT_NAME = ?
				    AND I.BASE_TABLE_UID = O2.OBJECT_UID 
				    FOR READ UNCOMMITTED ACCESS ORDER BY 1;
				]]></text>
		</query>
		<query>
			<!-- Fetch index attributes -->
			<name>SELECT_INDEX_ATTRIBUTES</name>
			<text><![CDATA[SELECT O.OBJECT_NAME AS "Index Name", USER(O.OBJECT_OWNER) AS "Owner",
				    CONVERTTIMESTAMP(O.CREATE_TIME) AS "CreateTime", CONVERTTIMESTAMP(O.REDEF_TIME) AS "ModifiedTime",
				    CAST(O.object_uid  AS CHAR(26)) as "Object ID",
				    O2.OBJECT_NAME as "Table Name", 
				    CASE WHEN I.IS_UNIQUE = 1 THEN 'Unique' ELSE 'Non Unique' END as "Is Unqiue", 
				    I.KEY_COLCOUNT as "Key Col. Count", I.NONKEY_COLCOUNT as "Non Key Col. Count"
				    FROM TRAFODION."_MD_".INDEXES I, TRAFODION."_MD_".OBJECTS O,
				    TRAFODION."_MD_".OBJECTS O2 
				    WHERE  O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ? 
				    AND O.OBJECT_NAME = ?  
				    AND I.INDEX_UID = O.OBJECT_UID AND I.BASE_TABLE_UID = O2.OBJECT_UID 
				    FOR READ UNCOMMITTED ACCESS ORDER BY 1;
				]]></text>
		</query>
		<query>
			<!-- Fetch list of columns for a schema object -->
			<name>SELECT_OBJECT_COLUMNS</name>
			<text><![CDATA[SELECT CASE WHEN K.CONSTRAINT_TYPE = 'PRIMARY KEY' THEN 'P' ELSE '' END as PRIMARY_KEY, 
				C.COLUMN_NUMBER, C.COLUMN_NAME, SQL_DATA_TYPE, COLUMN_SIZE, COLUMN_PRECISION, COLUMN_SCALE, 
				CASE WHEN NULLABLE = 0 THEN 'NOT NULL'
				    ELSE 'NULL'
				END AS NULLABLE, 
				CASE CHARACTER_SET
				    WHEN '_unknown_' THEN ''
				ELSE CHARACTER_SET 
				    END AS CHARACTER_SET, DEFAULT_VALUE
				FROM "_MD_".OBJECTS O, "_MD_".COLUMNS C 
				LEFT JOIN (
				    SELECT T.TABLE_UID, CAST(CASE WHEN T.CONSTRAINT_TYPE = 'P'
				        THEN 'PRIMARY KEY' WHEN T.CONSTRAINT_TYPE = 'F' THEN 'FOREIGN KEY' WHEN
				        T.CONSTRAINT_TYPE = 'U' THEN 'UNIQUE KEY' ELSE ' ' END AS VARCHAR(22))
				        CONSTRAINT_TYPE, K.COLUMN_NAME, K.COLUMN_NUMBER
				    FROM TRAFODION."_MD_".OBJECTS O,
				    TRAFODION."_MD_".TABLE_CONSTRAINTS T,
				    TRAFODION."_MD_".KEYS K 
				    WHERE O.SCHEMA_NAME = ?
				    AND O.OBJECT_NAME = ?
				    AND O.OBJECT_UID = T.TABLE_UID
				    AND T.CONSTRAINT_UID = K.OBJECT_UID FOR
				    READ UNCOMMITTED ACCESS
				    ) AS  K
				    ON C.OBJECT_UID = K.TABLE_UID 
				    AND C.COLUMN_NAME = K.COLUMN_NAME 
				    AND K.CONSTRAINT_TYPE = 'PRIMARY KEY'
				WHERE O.SCHEMA_NAME = ?
				AND O.OBJECT_NAME = ?
				AND O.OBJECT_UID = C.OBJECT_UID
				AND C.COLUMN_NAME != '_SALT_'
				FOR READ UNCOMMITTED ACCESS ORDER BY 2;
			]]></text>
		</query>
		<query>
			<!-- Fetch list of columns for a view -->
			<name>SELECT_VIEW_COLUMNS</name>
			<text><![CDATA[SELECT  C.COLUMN_NUMBER, C.COLUMN_NAME,
			    CAST(CASE WHEN CHAR_LENGTH(TRIM(C.SQL_DATA_TYPE)) = 0 THEN 'UNKNOWN' ELSE
			    C.SQL_DATA_TYPE END AS CHAR(24)) SQL_DATA_TYPE, 
			    C.COLUMN_SIZE, C.COLUMN_PRECISION, C.COLUMN_SCALE, C.NULLABLE,
			    CASE CHARACTER_SET
			        WHEN '_unknown_' THEN ''
			        ELSE CHARACTER_SET 
			    END AS CHARACTER_SET, C.DEFAULT_VALUE 
			FROM TRAFODION."_MD_".OBJECTS O,
			TRAFODION."_MD_".COLUMNS C 
			WHERE O.CATALOG_NAME = 'TRAFODION' 
			AND O.SCHEMA_NAME = ? 
			AND OBJECT_NAME = ? 
			AND O.OBJECT_UID = C.OBJECT_UID 
			AND O.OBJECT_TYPE = 'VI' 
			FOR READ UNCOMMITTED ACCESS ORDER BY 1, 2, 3, 4 ;
			]]></text>
		</query>		
		<query>
			<!-- Get HBase Region info for a database object -->
			<name>SELECT_OBJECT_REGIONS</name>
			<text><![CDATA[select region_num, region_name, num_stores, num_store_files,
                CAST( CASE WHEN 1 > store_file_uncomp_size THEN 0 ELSE (store_file_uncomp_size/(1024*1024)) END AS DECIMAL(18,2)) AS store_file_uncomp_size_mb , 
                CAST( CASE WHEN 1 > store_file_size THEN 0 ELSE (store_file_size/(1024*1024)) END AS DECIMAL(18,2)) AS store_file_size_mb , 
                CAST( CASE WHEN 1 > mem_store_size THEN 0 ELSE (mem_store_size/(1024*1024)) END AS DECIMAL(18,2)) AS mem_store_size_mb , 
				read_requests_count, write_requests_count
				from table(region stats (%1$s %2$s))
			]]></text>
		</query>			
		<query>
			<!-- Get histogram stats for a table -->
			<name>SELECT_OBJECT_HISTOGRAM_STATISTICS</name>
			<text><![CDATA[SELECT T1.COLUMN_NUMBER, C.COLUMN_NAME, C.SQL_DATA_TYPE, ISNULL(SB_HISTOGRAM_INTERVALS.INTERVAL_ROWCOUNT,0) as NULL_COUNT, 
				T1.LOW_VALUE, T1.HIGH_VALUE, T1.CV, 
				T1.TOTAL_UEC, T1.ROWCOUNT, T1.STATS_TIME
				FROM (
				    SELECT TABLE_UID, HISTOGRAM_ID, COLUMN_NUMBER, LOW_VALUE, HIGH_VALUE, CV, TOTAL_UEC, ROWCOUNT,
				    STATS_TIME
				    FROM %1$s.SB_HISTOGRAMS SB_HISTOGRAMS, "_MD_".OBJECTS AS O
				    WHERE O.SCHEMA_NAME = ? AND O.OBJECT_NAME = ?
                    AND O.OBJECT_UID = SB_HISTOGRAMS.TABLE_UID 
                    AND COLCOUNT = 1
				) AS T1 
				LEFT JOIN %1$s.SB_HISTOGRAM_INTERVALS SB_HISTOGRAM_INTERVALS 
				ON (T1.TABLE_UID = SB_HISTOGRAM_INTERVALS.TABLE_UID AND T1.HISTOGRAM_ID = SB_HISTOGRAM_INTERVALS.HISTOGRAM_ID 
				AND SB_HISTOGRAM_INTERVALS.INTERVAL_BOUNDARY = '(NULL)') 
				, "_MD_".COLUMNS C
				WHERE T1.COLUMN_NUMBER = C.COLUMN_NUMBER
				AND T1.TABLE_UID = C.OBJECT_UID
				AND C.COLUMN_NAME != '_SALT_'
				ORDER BY T1.COLUMN_NUMBER FOR READ UNCOMMITTED ACCESS;
			]]></text>
		</query>	
		<query>
			<!-- Get DDL Text for database object -->
			<name>SELECT_DDL_TEXT</name>
			<text><![CDATA[SHOWDDL %1$s %2$s, PRIVILEGES]]></text>
		</query>		
		<query>
			<!-- Get schema level privileges -->
			<name>SELECT_SCHEMA_PRIVILEGES</name>
			<text><![CDATA[SELECT GRANTEE_NAME as "Grantee Name", GRANTOR_NAME as "Grantor Name", 
				PRIVILEGES_BITMAP as "Granted Privileges", GRANTABLE_BITMAP as "Privileges with Grant Option"
				FROM "_PRIVMGR_MD_".SCHEMA_PRIVILEGES
				WHERE SCHEMA_UID = ?
			]]></text>
		</query>
		<query>
			<!-- Get object level privileges -->
			<name>SELECT_OBJECT_PRIVILEGES</name>
			<text><![CDATA[SELECT GRANTEE_NAME as "Grantee Name", GRANTOR_NAME as "Grantor Name", 
				PRIVILEGES_BITMAP as "Granted Privileges", GRANTABLE_BITMAP as "Privileges with Grant Option"
				FROM "_MD_".OBJECTS AS T1, "_PRIVMGR_MD_".OBJECT_PRIVILEGES OBJECT_PRIVILEGES
				WHERE T1.SCHEMA_NAME = ? AND T1.OBJECT_NAME = ?
				AND T1.OBJECT_UID = OBJECT_PRIVILEGES.OBJECT_UID
			]]></text>
		</query>
		<query>
			<!-- Fetch list of libraries in a schema -->
			<name>SELECT_LIBRARIES_IN_SCHEMA</name>
			<text><![CDATA[select distinct object_name as "Library Name", user(object_owner) as "Owner", 
					converttimestamp(create_time) as "CreateTime", converttimestamp(redef_time) as "ModifiedTime",
					CAST(object_uid  AS CHAR(26))  as "Object ID" , L.LIBRARY_FILENAME as "Code File Name"
					from "_MD_".objects O, "_MD_".LIBRARIES L
					WHERE CATALOG_NAME = ? AND SCHEMA_NAME = ?
					and object_type = ?
					and O.OBJECT_UID = L.LIBRARY_UID
					order by object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>	
		<query>
			<!-- Fetch attributes of a library -->
			<name>SELECT_LIBRARY_ATTRIBUTES</name>
			<text><![CDATA[select distinct object_name as "Name", user(object_owner) as "Owner", 
					converttimestamp(create_time) as "CreateTime", converttimestamp(redef_time) as "ModifiedTime",
					CAST(object_uid  AS CHAR(26))  as "Object ID" , L.LIBRARY_FILENAME as "Code File Name"
					from "_MD_".objects O, "_MD_".LIBRARIES L
					WHERE CATALOG_NAME = ? AND SCHEMA_NAME = ?
					and o.object_name = ? and object_type = ?
					and O.OBJECT_UID = L.LIBRARY_UID
					order by object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch procedures and udfs that use this library -->
			<name>SELECT_LIBRARY_USAGE</name>
			<text><![CDATA[SELECT 'Used By' AS Usage_Type, T3.OBJECT_NAME AS "Routine Name", T3.SCHEMA_NAME as "Routine Schema" ,
					CASE T4.UDR_TYPE
					  WHEN 'P' THEN 'Procedure'
					  WHEN 'T' THEN 'Table Mapping UDF'
					  WHEN 'F' THEN 'Scalar Function UDF'
					  ELSE 'UnKnown'
					END as "Routine Type"
					FROM "_MD_".OBJECTS AS T1,
					"_MD_".LIBRARIES_USAGE AS T2,
					"_MD_".OBJECTS AS T3 , 
					"_MD_".ROUTINES AS T4 
					WHERE T1.CATALOG_NAME = ? 
					AND T1.SCHEMA_NAME = ? 
					AND T1.OBJECT_NAME = ? 
					AND T1.OBJECT_UID = T2.USING_LIBRARY_UID
					AND T2.USING_LIBRARY_UID = T4.LIBRARY_UID 
					AND T3.OBJECT_UID = T2.USED_UDR_UID 
					AND T3.OBJECT_TYPE = 'UR' 
					AND T2.USED_UDR_UID = T4.UDR_UID 
					ORDER BY 1 FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch list of procedures/udfs in a schema -->
			<name>SELECT_ROUTINES_IN_SCHEMA</name>
			<text><![CDATA[	select distinct O.object_name as "Name", user(O.object_owner) as "Owner", 
					converttimestamp(O.create_time) as "CreateTime", converttimestamp(O.redef_time) as "ModifiedTime",
					CAST(O.object_uid  AS CHAR(26)) as "Object ID", 
					isnull(O2.SCHEMA_NAME,'') as "UsageSchemaName", isnull(O2.OBJECT_NAME,'') as "Library Name"
					from "_MD_".objects O, "_MD_".ROUTINES R LEFT JOIN "_MD_".objects O2
					ON R.LIBRARY_UID = O2.OBJECT_UID
					WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ?
					and O.object_type = ?
					and O.object_uid = R.UDR_UID
					and R.udr_type = ?
					order by O.object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>			
		<query>
			<!-- Fetch list of procedures/udfs in a schema -->
			<name>SELECT_PROCDURES_IN_SCHEMA</name>
			<text><![CDATA[	select distinct O.object_name as "Name", user(O.object_owner) as "Owner", 
					converttimestamp(O.create_time) as "CreateTime", converttimestamp(O.redef_time) as "ModifiedTime",
					CAST(O.object_uid  AS CHAR(26)) as "Object ID", 
					isnull(O2.SCHEMA_NAME,'') as "UsageSchemaName", isnull(O2.OBJECT_NAME,'') as "Library Name"
					from "_MD_".objects O, "_MD_".ROUTINES R LEFT JOIN "_MD_".objects O2
					ON R.LIBRARY_UID = O2.OBJECT_UID
					WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ?
					and O.object_type = ?
					and O.object_uid = R.UDR_UID
					and R.udr_type = 'P'
					order by O.object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch list of procedures/udfs in a schema -->
			<name>SELECT_UDFS_IN_SCHEMA</name>
			<text><![CDATA[	select distinct O.object_name as "Name", user(O.object_owner) as "Owner", 
					converttimestamp(O.create_time) as "CreateTime", converttimestamp(O.redef_time) as "ModifiedTime",
					CAST(O.object_uid  AS CHAR(26)) as "Object ID", 
					CASE WHEN R.UDR_TYPE = 'T' THEN 'TABLE MAPPING FUNCTION'
					ELSE 'SCALAR FUNCTION'
					END as "Function Type",
					CASE R.LANGUAGE_TYPE 
						WHEN 'J' THEN 'Java'
						WHEN 'C+' THEN 'C++'
					ELSE R.LANGUAGE_TYPE END as "Language Type",
					isnull(O2.SCHEMA_NAME,'') as "UsageSchemaName", isnull(O2.OBJECT_NAME,'') as "Library Name"
					from "_MD_".objects O, "_MD_".ROUTINES R LEFT JOIN "_MD_".objects O2
					ON R.LIBRARY_UID = O2.OBJECT_UID
					WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ?
					and O.object_type = ?
					and O.object_uid = R.UDR_UID
					and (R.udr_type = 'F' or R.udr_type = 'T')
					order by O.object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch attributes for a procedure or udf -->
			<name>SELECT_ROUTINE_ATTRIBUTES</name>
			<text><![CDATA[	select distinct O.object_name as "Name", user(O.object_owner) as "Owner", 
					converttimestamp(O.create_time) as "CreateTime", converttimestamp(O.redef_time) as "ModifiedTime",
					CAST(O.object_uid  AS CHAR(26)) as "Object ID", 
					CASE WHEN R.UDR_TYPE = 'T' THEN 'TABLE MAPPING FUNCTION'
					ELSE 'SCALAR FUNCTION'
					END as "Function Type",
					CASE R.LANGUAGE_TYPE 
						WHEN 'J' THEN 'Java'
						WHEN 'C+' THEN 'C++'
					ELSE R.LANGUAGE_TYPE END as "Language Type",
					isnull(O2.SCHEMA_NAME,'') as "UsageSchemaName", isnull(O2.OBJECT_NAME,'') as "Library Name"
					from "_MD_".objects O, "_MD_".ROUTINES R LEFT JOIN "_MD_".objects O2
					ON R.LIBRARY_UID = O2.OBJECT_UID
					WHERE O.CATALOG_NAME = ? AND O.SCHEMA_NAME = ?
					AND O.OBJECT_NAME = ? and O.object_type =?
					and O.object_uid = R.UDR_UID
					order by O.object_name FOR READ UNCOMMITTED ACCESS;
				]]></text>
		</query>
		<query>
			<!-- Fetch list of objects referencing the given table -->
			<name>GET_TABLE_USAGE</name>
			<text><![CDATA[SELECT 'Used By' AS Usage_Type, Object_Name, 'View' AS Object_Type
						FROM ( GET ALL VIEWS ON TABLE %1$s, no header) AS X(Object_Name)]]></text>
		</query>
		<query>
			<!-- Fetch list of child views using the given view and the list of views and tables 
				used by the given view -->
			<name>GET_VIEW_USAGE</name>
			<text><![CDATA[SELECT 'Used By' as Usage_Type, Object_Name, 'View' AS Object_Type
				    FROM ( GET ALL VIEWS ON VIEW %1$s, no header) AS A(Object_Name)
					UNION 
					SELECT 'Uses' as Usage_Type,  Object_Name, 'Table' AS Object_Type
					    FROM ( GET ALL TABLES IN VIEW %1$s, no header) AS B(Object_Name)
					UNION 
					SELECT 'Uses' as Usage_Type,  Object_Name, 'View' AS Object_Type
				    FROM ( GET ALL VIEWS IN VIEW %1$s, no header) AS C(Object_Name)
    			]]></text>
		</query>
		<query>
			<!-- Fetch the library used by the routine -->
			<name>GET_ROUTINE_USAGE</name>
			<text><![CDATA[
					SELECT 'Uses' AS Usage_Type, t2.object_name, t2.schema_name, 'Library' as Object_Type
					FROM "_MD_".LIBRARIES_USAGE T1, 
					"_MD_".OBJECTS T2,
					"_MD_".OBJECTS T3 
					WHERE T3.SCHEMA_NAME = ? AND T3.OBJECT_NAME = ?
					AND T1.USED_UDR_UID = T3.OBJECT_UID
					AND T1.USING_LIBRARY_UID= T2.OBJECT_UID 
					FOR READ UNCOMMITTED ACCESS 
			]]></text>
		</query>
		<query>
			<!-- Fetch list of historical workloads -->
			<name>SELECT_REPO_QUERIES</name>
			<text><![CDATA[SELECT [first %1$s] trim(query_id) as "Query ID", query_status AS "Status" ,
						exec_start_utc_ts as "Start Time", exec_end_utc_ts AS "End Time", 
						q.USER_NAME AS "User Name",  q.APPLICATION_NAME as "Application",
						q.CLIENT_NAME as "Client", query_elapsed_time AS "Elapsed Time", 
						(SQL_SPACE_USED +  SQL_HEAP_USED) as "Memory Used", 
						(process_create_busy_time + sql_process_busy_time + disk_process_busy_time + udr_process_busy_time + master_execution_time) AS "CPU Time",
						disk_ios as "Disk IOs",
						QUERY_TEXT AS "Query Text",
						s.profile_name as "Profile", s.sla_name as "SLA" 
					FROM "_REPOS_".metric_query_table q , "_REPOS_".metric_session_table s
					%2$s
					and q.session_id = s.session_id
					order by exec_start_utc_ts desc
					for read uncommitted access;
				]]></text>
		</query>
		<query>
			<!-- Fetch query detail from repository -->
			<name>SELECT_REPO_QUERY_DETAIL</name>
			<text><![CDATA[select query_status, 
						exec_start_utc_ts, 
						exec_end_utc_ts, 
						query_sub_status,
						master_process_id,
						q.process_name,
						q.session_id,
						q.user_name,
						q.application_name,
						q.client_name,
						statement_type,
						statement_subtype,
						submit_utc_ts,
						compile_start_utc_ts,
						compile_end_utc_ts,
						compile_elapsed_time,
						cmp_dop,
						cmp_missing_stats,
						cmp_num_joins,
						cmp_full_scan_on_table,
						est_accessed_rows,
						est_used_rows,
						cmp_cpu_path_length,
						cmp_stmt_heap_size,
						cmp_context_heap_size,
						est_cost,
						est_cardinality,
						est_io_time,
						est_msg_time,
						est_idle_time,
						est_cpu_time,
						est_total_mem,
						cmp_number_of_bmos,
						cmp_overflow_size,
						stats_error_code,
						query_elapsed_time,
						sql_process_busy_time,
						disk_process_busy_time,
						disk_ios,
						num_sql_processes,
						total_mem_alloc,
						max_mem_used,
						transaction_id,
						master_execution_time,
						master_elapsed_time,
						error_code,
						sql_error_code,
						error_text,
						query_text,
						total_num_aqr_retries,
						msg_bytes_to_disk,
						msgs_to_disk,
						num_rows_iud,
						processes_created,
						num_nodes,
						ovf_buffer_bytes_written,
						ovf_buffer_bytes_read,
						process_create_busy_time,
						udr_process_busy_time,
						last_updated_time,
						profile_name,
						sla_name
				 from "_REPOS_".metric_query_table q, "_REPOS_".metric_session_table s
				 WHERE query_id = ?
				 and q.session_id = s.session_id
				 for read uncommitted access; ]]></text>
		</query>
		<query>
			<!-- Fetch list of active queries visible in RMS -->
			<name>SELECT_ACTIVE_QUERIES</name>
			<text><![CDATA[select q.*, s.profile_name, s.sla_name from 
                      ( select current_timestamp "Time"   -- (1) Now
				      ,cast(tokenstr('lastActivity:', variable_info)               -- (2) Last Activity
				            as NUMERIC(18) ) "Last Activity Seconds"
				      ,cast(tokenstr('Qid:', variable_info)               -- (3) QID
				            as varchar(175) CHARACTER SET UTF8) "Query ID"
				      , cast(tokenstr('State:', variable_info)           -- (4) State
				             as char(30)) "Execution State"
				      , cast(substr(variable_info,             -- (5) SQL Source
				             position('%1$s' in variable_info) + char_length('%1$s')+1,
				             char_length(variable_info) - 
				                        ( position('%1$s' in variable_info) + char_length('%1$s')+1 ))
				            as char(256) CHARACTER SET UTF8) "Query Text (preview)"
				      , cast(tokenstr('sqlSrcLen:', variable_info)
				            as NUMERIC(18) ) "Full Text Length"          
				from table (statistics(NULL, 'ACTIVE_QUERIES=%2$s'))
				) q left join "_REPOS_".metric_session_table s
				on QUERYID_EXTRACT ("Query ID", 'SESSIONID') = s.session_id
				order by 2 descending;
				]]></text>
		</query>
		<query>
			<!-- Fetch active query detail from rms -->
			<name>SELECT_ACTIVE_QUERY_DETAIL</name>
			<text><![CDATA[get statistics for qid \"%1$s\" %2$s]]></text>
		</query>
		<query>
			<!-- Fetch active query detail from rms -->
			<name>SELECT_ACTIVE_QUERY_DETAIL_NEW</name>
			<text><![CDATA[Select q.*, s.profile_name as "profile", s.sla_name as "sla" from
				(
					select lc_tdb_id as "LC", rc_tdb_id as "RC", tdb_id as "TDB_ID",  parent_tdb_id as "Parent_TDB_ID", seq_num as "Explain_TDB_ID", 
					frag_num as "Frag_Num", trim(tdb_name) as "TDB_Name", est_rows as "Estimated_Rows", act_rows as "Actual_Rows", 
					val1,  val1_txt, val2, val2_txt, val3, val3_txt, val4, val4_txt, 
					variable_info from table(statistics(null, 'QID=%1$s'))
				) q left join "_REPOS_".metric_session_table s
				on QUERYID_EXTRACT ('%1$s', 'SESSIONID') = s.session_id
				order by tdb_id desc
			]]></text>
		</query>
		<query>
			<name>CANCEL_QUERY</name>
			<text><![CDATA[control query cancel qid %1$s]]></text>
		</query>
		<query>
			<!-- Fetch list of log entries -->
			<name>SELECT_LOGS</name>
			<text><![CDATA[select [first %1$s] log_ts as "Time", severity as "Severity", component as "Component", process_name as "Process", sql_code as "Error Code", cast(message as char(1000)) as "Message"
				from udf(event_log_reader()) 
				%2$s
				order by log_ts desc
				]]></text>
		</query>
		<query>
			<name>EXPLAIN_ACTIVE_QUERY</name>
			<text><![CDATA[SELECT * FROM TABLE(explain(null, 'QID=%1$s'))]]></text>
		</query>
		<query>
			<name>EXPLAIN_USING_QID</name>
			<text><![CDATA[SELECT * FROM TABLE(explain(null, 'EXPLAIN_QID=%1$s'))]]></text>
		</query>
		<query>
			<name>TEXT_EXPLAIN_USING_QID_RMS</name>
			<text><![CDATA[explain for qid %1$s]]></text>
		</query>
		<query>
			<name>TEXT_EXPLAIN_USING_QID_REPO</name>
			<text><![CDATA[explain qid %1$s from repository]]></text>
		</query>
		<query>
			<name>EXPLAIN_USING_QTEXT</name>
			<text><![CDATA[SELECT * FROM TABLE(explain(null, 'EXPLAIN_STMT=%1$s'))]]></text>
		</query>
		
		<query>
			<name>OPENTSDB_IOWAITS</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:rate:proc.stat.cpu{type=iowait}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_IOWAITS_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:rate:proc.stat.cpu{type=iowait,host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_CPU_LOAD</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:proc.loadavg.15min", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_CPU_LOAD_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:proc.loadavg.15min{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_FREE_MEMORY</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:proc.meminfo.memfree", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_FREE_MEMORY_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:proc.meminfo.memfree{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_NETWORK_IO</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:rate:%4$s-avg:proc.net.bytes{direction=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_NETWORK_IO_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:rate:%4$s-avg:proc.net.bytes{direction=%5$s,host=*}", "method":"get"}]]></text>
		</query>
		
		<query>
			<name>OPENTSDB_CANARY_RESPONSE</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:esgyndb.canary.sqlconnect.time&m=avg:%4$s-avg:esgyndb.canary.sqlread.time", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_CANARY_RESPONSE_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&m=avg:%4$s-avg:%5$s{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_DISK_READS</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:rate:%4$s-avg:iostat.disk.read_requests", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_DISK_WRITES</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:rate:%4$s-avg:iostat.disk.write_requests", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_GCTIME</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:%4$s-avg:rate:hbase.regionserver.jvmmetrics.GcTimeMillis", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_GCTIME_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:%4$s-avg:rate:hbase.regionserver.jvmmetrics.GcTimeMillis{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_LOADAVG_1</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:rate:%4$s-avg:proc.loadavg.1min", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_GETOPS</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:rate:%4$s-avg:hbase.regionserver.server.Get_num_ops", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_TRANSACTION_STATS</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:rate:%4$s-avg:esgyndb.dtm.txnaborts&m=sum:rate:%4$s-avg:esgyndb.dtm.txnbegins&m=sum:rate:%4$s-avg:esgyndb.dtm.txncommits", "method":"get"}]]></text>
		</query>		
		<query>
			<name>OPENTSDB_TRANSACTION_STATS_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:rate:%4$s-avg:%5$s{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_DISK_SPACE_USED</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:%4$s-avg:df.bytes.percentused", "method":"get"}]]></text>
		</query>		
		<query>
			<name>OPENTSDB_DISK_SPACE_USED_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:%4$s-avg:df.bytes.percentused{host=*}", "method":"get"}]]></text>
		</query>		
		<query>
			<name>OPENTSDB_STOREFILE_COUNT</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:%4$s-avg:hbase.regionserver.server.storeFileCount", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_STOREFILE_COUNT_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:%4$s-avg:hbase.regionserver.server.storeFileCount{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_STOREFILE_SIZE</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:%4$s-avg:hbase.regionserver.server.storeFileSize", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_STOREFILE_SIZE_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:%4$s-avg:hbase.regionserver.server.storeFileSize{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_REGIONSERVER_MEMORY_USE</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:%4$s-avg:hbase.regionserver.jvmmetrics.MemHeapUsedM", "method":"get"}]]></text>		
		</query>
		<query>
			<name>OPENTSDB_REGIONSERVER_MEMORY_USE_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=avg:%4$s-avg:hbase.regionserver.jvmmetrics.MemHeapUsedM{host=*}", "method":"get"}]]></text>		
		</query>
		<query>
			<name>OPENTSDB_REGION_MEMSTORE_SIZE</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:%4$s-avg:hbase.regionserver.regions.memStoreSize", "method":"get"}]]></text>
		</query>
		<query>
			<name>OPENTSDB_REGION_MEMSTORE_SIZE_DRILLDOWN</name>
			<text><![CDATA[{"url":"%1$s/api/query?start=%2$s&end=%3$s&ms=true&m=sum:%4$s-avg:hbase.regionserver.regions.memStoreSize{host=*}", "method":"get"}]]></text>
		</query>
		<query>
			<name>FETCH_ALERTS_LIST</name>
			<text><![CDATA[{"url":"%1$s/api/alerts?filter=%2$s", "method":"get"}]]></text>
		</query>		
		<query>
			<name>FETCH_ALERT_DETAIL</name>
			<text><![CDATA[{"url":"%1$s/api/status?ak=%2$s", "method":"get"}]]></text>
		</query>		
		<query>
			<name>UPDATE_ALERT</name>
			<text><![CDATA[{"url":"%1$s/api/action", "method":"post", "jsonParameter":{"Keys":["%2$s"], "Message":"%3$s", "Notify":%4$s,  "Type":"%5$s", "User":"%6$s" }}]]></text>
		</query>
		<query>
			<name>SPJ_PUT</name>
			<text><![CDATA[{call "_LIBMGR_".put(?,?,?,?)}]]></text>
		</query>
		<query>
			<name>SPJ_ADDLIB</name>
			<text><![CDATA[{call "_LIBMGR_".addlib(?,?,null,null)}]]></text>
		</query>
		<query>
			<name>SPJ_ALTERLIB</name>
			<text><![CDATA[{call "_LIBMGR_".alterlib(?,?,null,null)}]]></text>
		</query>
		<query>
			<name>SPJ_DROPLIB</name>
			<text><![CDATA[{call "_LIBMGR_".droplib(?,?)}]]></text>
		</query>
		<query>
			<name>SPJ_GETFILE</name>
			<text><![CDATA[{call "_LIBMGR_".getfile(?,?,?,?)}]]></text>
		</query>
		<query>
			<name>CHECK_SCHEMA</name>
			<text><![CDATA[select distinct schema_name from "_MD_".objects where object_name = '__SCHEMA__' and schema_name = '%1$s';]]></text>
		</query>
		<query>
			<name>CHECK_LIBRARY</name>
			<text><![CDATA[select object_name, object_type from "_MD_".objects where schema_name = '%1$s' and object_name = '%2$s' and object_type = 'LB']]></text>
		</query>
		<query>
			<name>WMS_ADD_ALTER_PROFILE</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/profiles", "method":"POST", "jsonParameter":{"%2$s":{"cqd":"%3$s","set":"%4$s","hostList":"%5$s","isDefault":"no","lastUpdate":""}}, "contentType":"application/json"}]]></text>
		</query>
		<query>
			<name>WMS_DELETE_PROFILE</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/profiles/query?delete=%2$s", "method":"DELETE"}]]></text>
		</query>
		<query>
			<name>WMS_GET_PROFILES</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/profiles", "method":"get"}]]></text>
		</query>
		<query>
			<name>WMS_ADD_ALTER_SLA</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/slas", "method":"POST", "jsonParameter":{"%2$s":{"priority":"%3$s","limit":"%4$s","throughput":"%5$s","onConnectProfile":"%6$s","onDisconnectProfile":"%7$s", "isDefault":"no","lastUpdate":""}}, "contentType":"application/json"}]]></text>
		</query>
		<query>
			<name>WMS_GET_SLAS</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/slas", "method":"get"}]]></text>
		</query>
		<query>
			<name>WMS_DELETE_SLA</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/slas/query?delete=%2$s", "method":"DELETE"}]]></text>
		</query>
		<query>
			<name>WMS_GET_MAPPINGS</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/mappings", "method":"get"}]]></text>
		</query>		
		<query>
			<name>WMS_ADD_ALTER_MAPPING</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/mappings", "method":"POST", "jsonParameter":{"%2$s":{"userName":"%3$s","applicationName":"%4$s","sessionName":"%5$s","roleName":"%6$s","sla":"%7$s","clientIpAddress":"%8$s","clientHostName":"%9$s","orderNumber":"%10$s", "isActive":"%11$s", "isDefault":"no","lastUpdate":""}}, "contentType":"application/json"}]]></text>
		</query>
		<query>
			<name>WMS_DELETE_MAPPING</name>
			<text><![CDATA[{"url":"%1$s/v1/wms/mappings/query?delete=%2$s", "method":"DELETE"}]]></text>
		</query>
	</queries>
</SystemQueries>
